# name: Terraform

# on:
#   push:
#     branches: ["main"]

# permissions:
#   contents: read

# env:
#   ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#   ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#   ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#   ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless of the runner's operating system
#     defaults:
#       run:
#         shell: bash

#     steps:
#       # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v3

#       # Install Azure CLI
#       - name: Install Azure CLI
#         run: |
#           curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

#       # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2

#       # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#       - name: Terraform Init
#         run: terraform init

#       # Login to Azure via Azure CLI
#       - name: Login via Azure CLI
#         uses: azure/login@v1
#         with: # Set Azure credentials secret as an input
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id : ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id : ${{ secrets.AZURE_SUBSCRIPTION_ID }}

# #           env: # Or as an environment variable
# #           creds: ${{ secrets.AZURE_CREDENTIALS }}


#       # Apply Terraform changes
#       - name: Terraform Apply
#         run: terraform apply -auto-approve

name: 'Terraform'

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Azure CLI Login
      run: az login

    - name: Login via Azure CLI
      uses: azure/login@v1 
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az account show
          az group list



    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Apply
      run: terraform apply -auto-approve
